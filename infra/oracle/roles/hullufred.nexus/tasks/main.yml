---
# tasks file for ansible-nexus
- name: Download nexus_package 
  tags:
    - install_nexus
  get_url: url=http://download.sonatype.com/nexus/3/latest-unix.tar.gz dest="{{ nexus_download_dir }}/{{ nexus_package }}"
  #get_url: url=http://download.sonatype.com/nexus/oss/{{ nexus_package }} dest="{{ nexus_download_dir }}/{{ nexus_package }}"
  sudo: no

- name: Ensure Nexus o/s group exists
  tags:
    - install_nexus
  group: name="{{ nexus_os_group }}" state=present
  when: nexus_create_os_group
  sudo: true

- name: Ensure Nexus o/s user exists
  tags:
    - install_nexus
  user: name="{{ nexus_os_user }}" group="{{ nexus_os_group }}" shell="{{ nexus_os_user_shell }}" state=present
  when: nexus_create_os_user
  sudo: true

- name: Ensure Nexus installation directory exists
  tags:
    - install_nexus
  file:
    path="{{ nexus_installation_dir }}"
    state="directory"
  sudo: true

- name: Unpack Nexus download
  tags:
    - install_nexus
  unarchive:
    src="{{ nexus_download_dir }}/{{ nexus_package }}"
    dest="{{ nexus_installation_dir }}"
    creates="{{ nexus_installation_dir }}/nexus-{{ nexus_version }}"
    force=no
    copy=false
    owner={{ nexus_os_user }}
    group={{ nexus_os_group }}
    mode="0755"
  tags: unpack

- name: Update symlink nexus-latest
  tags:
    - install_nexus
  shell: ln -fs `ls -d {{ nexus_installation_dir }}/nexus-*|tail -1` {{ nexus_installation_dir }}/nexus-latest

#- name: Install createrepo for nexus-yum-repository-plugin
#  yum: name=createrepo state=installed
#  when: ansible_os_family == "RedHat"

#- name: Check if sonatype working directory exists
#  stat: path="{{ nexus_installation_dir }}/sonatype-work"
#  register: s_w

#- name: Move existing sonatype working directory into specified working dir
#  command: mv "{{ nexus_installation_dir }}/sonatype-work" "{{ nexus_working_dir }}"
#  when: s_w.stat.exists

- name: Set permissions and ownership on Nexus installation directory
  tags:
    - install_nexus
  file:
    path={{ nexus_installation_dir }}/{{ nexus_package }}
    state="directory"
    owner="{{ nexus_os_user }}"
    group="{{ nexus_os_group }}"
    mode="0755"
    recurse=true

#- name: Set permissions and ownership on Nexus work directory
#  file:
#    path={{ nexus_working_dir }}
#    state="directory"
#    owner="{{ nexus_os_user }}"
#    group="{{ nexus_os_group }}"
#    mode="0755"
#    recurse=true

- name: Set permissions and ownership on Nexus logs directory
  tags:
    - install_nexus
  file:
    path={{ nexus_installation_dir }}/nexus-latest/logs
    owner="{{ nexus_os_user }}"
    group="{{ nexus_os_group }}"
    state=directory

- name: Set permissions and ownership on Nexus tmp directory
  tags:
    - install_nexus
  file:
    path={{ nexus_installation_dir }}/nexus-latest/tmp
    owner="{{ nexus_os_user }}"
    group="{{ nexus_os_group }}"
    state=directory

#- name: Set permissions and ownership on Nexus pid directory
#  file:
#    path=/var/run/nexus
#    owner="{{ nexus_os_user }}"
#    group="{{ nexus_os_group }}"
#    state=directory

#- name: Configure port in nexus.properties
#  lineinfile:
#    dest="{{ nexus_installation_dir }}/nexus-{{ nexus_version }}/conf/nexus.properties"
#    line="application-port={{ nexus_port }}"
#    regexp="application-port=.*"
#    state=present
#  notify:
#    - 'restart nexus'

#- name: Configure workdir in nexus.properties
#  lineinfile:
#    dest="{{ nexus_installation_dir }}/nexus-{{ nexus_version }}/conf/nexus.properties"
#    line="nexus-work={{ nexus_working_dir }}"
#    regexp="nexus-work=.*"
#    state=present
#  notify:
#    - 'restart nexus'

#- name: Copy the /etc/init.d/nexus file
#  template: src=init-nexus.j2 dest=/etc/init.d/nexus owner=root group=root mode=0755 backup=yes
#  when: ansible_os_family == "RedHat"
#  notify:
#    - 'restart nexus'

- name: Setup the /etc/init.d/nexus file
  tags:
    - install_nexus_service
  shell: ln -fs {{ nexus_installation_dir }}/nexus-{{ nexus_version }}/bin/nexus /etc/init.d/nexus

- name: Register service with chkconfig system
  tags:
    - install_nexus_service
  service: name=nexus enabled=yes
  when: ansible_os_family == "RedHat"

- name: Set service start/stop order
  tags:
    - install_nexus_service
  sudo: yes
  command: chkconfig nexus reset
  when: ansible_os_family == "RedHat"
